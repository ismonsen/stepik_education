# Задача 5.1
"""На вход программе подается строка текста, содержащая символы и число nn. Из данной строки формируется список. Напишите
программу, которая разделяет список на вложенные подсписки так, что nn последовательных элементов принадлежат разным
подспискам.
a b c d e f g h i j k l m n
3
---->>>
[['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']]
"""
s = input().split()
n = int(input())
x = [[] for i in range(n)]
for i in range(len(s)):
    x[i % n].append(s[i])
print(x)

# Задача 5.2
"""Напишите программу, которая выводит максимальный элемент в заштрихованной области квадратной матрицы.
(под побочной диагональю). Элементы побочной диагонали также учитываются.
3
1 4 5
6 7 8
1 1 6
---->>>
8
"""
n = int(input())
a = [[int(j) for j in input().split()] for i in range(n)]
m = 0
for i in range(n):
    for j in range(n):
        if i >= n - 1 - j and a[i][j] > m:
            m = a[i][j]
print(m)

# Задача 5.3
"""Напишите программу, которая транспонирует квадратную матрицу.
На вход программе подаётся натуральное число n — количество строк и столбцов в матрице, затем элементы матрицы.
3
1 2 3
4 5 6
7 8 9
---->>>
1 4 7
2 5 8
3 6 9
"""
n = int(input())
a = [[int(j) for j in input().split()] for i in range(n)]
a1 = [[0] * n for i in range(n)]
for i in range(n):
    for j in range(n):
        a1[j][i] = a[i][j]
for row in a1:
    print(*row)

# Задача 5.4
"""На вход программе подается нечетное натуральное число nn. Напишите программу, которая создает матрицу размером n×n 
заполнив её символами . . Затем заполните символами * среднюю строку и столбец матрицы, главную и побочную диагональ 
матрицы. Выведите полученную матрицу на экран, разделяя элементы пробелами.
3
---->>>
* . * . *
. * * * .
* * * * *
. * * * .
* . * . *
"""
n = int(input())
mat = [['.'] * n for _ in range(n)]
for i in range(n):
    mat[i][i] = '*'
    mat[i][n - i - 1] = '*'
    mat[n // 2][i] = '*'
    mat[i][n // 2] = '*'
for row in mat:
    print(*row)

# Задача 5.5
"""Напишите программу проверки симметричности квадратной матрицы относительно побочной диагонали.
На вход программе подаётся натуральное число n — количество строк и столбцов в матрице, затем элементы матрицы.
3
0 3 10
4 9 3
7 4 0
---->>>
YES
"""
n = int(input())
mat = [[int(i) for i in input().split()] for _ in range(n)]
res = 'YES'
for i in range(n - 1):
    for j in range(n - i):
        if mat[i][j] != mat[n - j - 1][n - i - 1]:
            res = 'NO'
            break
    if res == 'NO':
        break
print(res)

# Задача 5.6
"""
Латинским квадратом порядка nn называется квадратная матрица размером n×n, каждая строка и каждый столбец 
которой содержат все числа от 1 до n. Напишите программу, которая проверяет, является ли заданная квадратная матрица 
латинским квадратом.
На вход программе подаётся натуральное число n — количество строк и столбцов в матрице, затем элементы матрицы: 
n строк, по n чисел в каждой, разделённые пробелами.
4
2 3 4 1
3 4 1 2
4 1 2 3
1 2 3 4
->>>
YES
"""
n = int(input())
mat = [[int(i) for i in input().split()] for _ in range(n)]
res, res1 = 'YES', 'YES'
for row in mat:
    if sorted(row) == list(range(1, n + 1)):
        res = 'YES'
    else:
        res = 'NO'
        break
if res == 'YES':
    mat2 = [[mat[j][i] for j in range(n)] for i in range(n)]
    for row in mat2:
        if sorted(row) == list(range(1, n + 1)):
            res1 = 'YES'
        else:
            res1 = 'NO'
            break
if res == 'NO' or res1 == 'NO':
    print('NO')
else:
    print('YES')

# Задача 5.7
"""
На шахматной доске 8×8 стоит ферзь. Отметьте положение ферзя на доске и все клетки, которые бьет ферзь. 
Клетку, где стоит ферзь, отметьте буквой Q, клетки, которые бьет ферзь, отметьте символами *, остальные клетки заполните 
точками.
На вход программе подаются координаты ферзя на шахматной доске в шахматной нотации (то есть в виде e4, где сначала 
записывается номер столбца (буква от a до h, слева направо), затем номер строки (цифра от 1 до 8, снизу вверх)).
c4
->>>
. . * . . . * .
. . * . . * . .
* . * . * . . .
. * * * . . . .
* * Q * * * * *
. * * * . . . .
* . * . * . . .
. . * . . * . .
"""
a = input()
sym = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h']
j_pos = sym.index(a[0])
i_pos = 8 - int(a[1])
desk = [['.'] * 8 for i in range(8)]
for i in range(8):
    for j in range(8):
        if j == j_pos or i == i_pos or i + j == i_pos + j_pos or i - j == i_pos - j_pos:
            desk[i][j] = '*'
desk[i_pos][j_pos] = 'Q'
for line in desk:
    print(*line)

# Задача 5.8
"""
На вход программе подается натуральное число nn. Напишите программу, которая создает матрицу размером n×n и 
заполняет её по следующему правилу:
на главной диагонали на месте каждого элемента должно стоять число 00;
на двух диагоналях, прилегающих к главной, число 11;
на следующих двух диагоналях число 22, и т.д.
5
->>>
0 1 2 3 4
1 0 1 2 3
2 1 0 1 2
3 2 1 0 1
4 3 2 1 0
"""
n = int(input())
mat = [[0] * n for _ in range(n)]
for i in range(n):
    for j in range(n):
        if i != j:
            mat[i][j] = j - i
        if j < i:
            mat[i][j] = i - j
for row in mat:
    print(*row)

# Задача 6.3_5
"""
Напишите программу, которая по введенным значениям a,b,c определяет и выводит вершину параболы.
На вход программе подаются три целых числа, каждое на отдельной строке.
-5
2
0
->>>
(0.2, 0.2)
"""
a, b, c = int(input()), int(input()), int(input())
x = - b / (2 * a)
y = (4 * a * c - b*b) / (4 * a)
print((x, y))

# Задача 6.3_6
"""
Напишите программу, которая выводит список хорошистов и отличников в классе.
На вход программе подается натуральное число nn, далее следует nn строк с фамилией школьника и его оценкой на каждой 
из них. Программа должна вывести сначала все введённые строки с фамилиями и оценками учеников в том же порядке. 
Затем следует пустая строка, а затем выводятся строки с фамилиями и оценками хорошистов и отличников (в том же порядке).
5
Круглов 4
Кузнецов 5
Федин 4
Тарасов 2
Словецкий 3
->>>
Круглов 4
Кузнецов 5
Федин 4
Тарасов 2
Словецкий 3

Круглов 4
Кузнецов 5
Федин 4
"""
students = [tuple(input().split()) for _ in range(int(input()))]
for student in students:
    print(*student)
print()
for student in students:
    if student[1] in '45':
        print(*student)

# Задача 6.3_6
"""
Последовательность Трибоначчи
Напишите программу, которая считывает натуральное число nn и выводит первые nn чисел последовательности Трибоначчи.
На вход программе подается одно число n\,  (n \le 100)n (n≤100) – количество членов последовательности.
Последовательность Трибоначчи – последовательность натуральных чисел, где каждое последующее число является суммой 
трех предыдущих:
1, 1, 1, 3, 5, 9, 17, 31, 57, 105
"""
n = int(input())
f1, f2, f3 = 1, 1, 1
out = []
for _ in range(n):
    out.append(f1)
    f1, f2, f3 = f2, f3, f1 + f2 + f3
print(*out)
