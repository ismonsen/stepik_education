# Задача 4.4_1
"""
На вход программе подаются два натуральных числа nn и mm, каждое на отдельной строке — количество строк и столбцов
в матрице. Далее вводятся сами элементы матрицы — слова, каждое на отдельной строке; подряд идут элементы сначала
первой строки, затем второй, и т.д. Напишите программу, которая сначала считывает элементы матрицы один за другим,
затем выводит их в виде матрицы.
"""
n, m = int(input()), int(input())
a = [[input() for _ in range(m)] for _ in range(n)]
for i in a:
    print(*i)

# Задача 4.4_2
"""
На вход программе подаются два натуральных числа nn и mm, каждое на отдельной строке — количество строк и столбцов 
в матрице. Далее вводятся сами элементы матрицы — слова, каждое на отдельной строке; подряд идут элементы сначала 
первой строки, затем второй, и т.д. Напишите программу, которая считывает элементы матрицы один за другим, 
выводит их в виде матрицы, выводит пустую строку, и снова ту же матрицу, но уже поменяв местами строки со столбцами: 
первая строка выводится как первый столбец, и так далее.
"""
n, m = int(input()), int(input())
a = [[input() for _ in range(m)] for _ in range(n)]
for i in a:
    print(*i)
print()
for i in range(m):
    for j in range(n):
        print(a[j][i], end=' ')
    print()

# Задача 4.4_3
"""
На вход программе подаётся натуральное число nn — количество строк и столбцов в матрице, затем элементы матрицы 
(целые числа) построчно через пробел. Программа должна вывести одно число — след заданной матрицы.
"""
n, s = int(input()), 0
a = [input().split() for _ in range(n)]
for i in range(n):
    s += int(a[i][i])
print(s)

# Задача 4.4_4
"""
Напишите программу, которая выводит количество элементов квадратной матрицы в каждой строке, больших среднего 
арифметического элементов данной строки.
"""
n = int(input())
a = [input().split() for _ in range(n)]
for i in range(n):
    x, counter = 0, 0
    for j in range(n):
        x += int(a[i][j])
    for j in range(n):
        if x/n < int(a[i][j]):
            counter += 1
    print(counter)

# Задача 4.4_5
"""
Напишите программу, которая выводит максимальный элемент в заштрихованной области квадратной матрицы.
3
1 4 5
6 7 8
1 1 6

1 
6 7 
1 1 6
"""
n = int(input())
a = [[int(_) for _ in input().split()] for j in range(n)]
m = int(a[0][0])
for i in range(n):
    for j in range(i + 1):
        if int(a[i][j]) > m:
            m = int(a[i][j])
print(m)

# Задача 4.4_6
"""
Напишите программу, которая выводит максимальный элемент в заштрихованной области квадратной матрицы.
3
1   5
6 7 8
1   6
"""
n = int(input())
a = [[int(i) for i in input().split()] for i in range(n)]
mx = int(a[0][0])
for i in range(n):
    for j in range(n):
        if j <= i <= n - 1 - j or n - 1 - j <= i <= j:
            if int(a[i][j]) > mx:
                mx = int(a[i][j])
print(mx)

# Задача 4.4_7
"""
Напишите программу, которая вычисляет сумму элементов: верхней, правой, нижней и левой четверти
"""
n = int(input())
a = [[int(i) for i in input().split()] for i in range(n)]
mx1, mx2, mx3, mx4 = 0, 0, 0, 0
for i in range(n):
    for j in range(n):
        if j > i and n - 1 - j > i:
            mx1 += int(a[i][j])
        if n - 1 - j < i < j:
            mx2 += int(a[i][j])
        if i > j and i > n - 1 - j:
             mx3 += int(a[i][j])
        if j < i < n - 1 - j :
            mx4 += int(a[i][j])
print('Верхняя четверть:', mx1)
print('Правая четверть:', mx2)
print('Нижняя четверть:', mx3)
print('Левая четверть:', mx4)

# Задача 4.5_1
"""
На вход программе подаются два натуральных числа nn и mm — количество строк и столбцов в матрице. Создайте матрицу mult 
размером n×m и заполните её таблицей умножения по формуле mult[i][j] = i * j.
"""
m, n = int(input()), int(input())
mult = [[i*j for i in range(n)] for j in range(m)]
for i in range(m):
    for j in range(n):
        print(str(mult[i][j]).ljust(3), end='')
    print()

# Задача 4.5_2
"""
На вход программе подаются два натуральных числа nn и mm — количество строк и столбцов в матрице, затем nn строк 
по mm целых чисел в каждой, отделенных символом пробела.
Напишите программу, которая находит индексы (строку и столбец) первого вхождения максимального элемента.
"""
n, m = int(input()), int(input())
a = [[int(i) for i in input().split()] for i in range(n)]
maxi, ix, jx = a[0][0], 0, 0
for i in range(n):
    for j in range(m):
        if a[i][j] > maxi:
            maxi, ix, jx = a[i][j], i, j
print(ix, jx)

# Задача 4.5_3
"""
Напишите программу, которая меняет местами столбцы в матрице.
"""
n, m = int(input()), int(input())
a = [[int(i) for i in input().split()] for i in range(n)]
jx = [int(i) for i in input().split()]
for i in range(n):
    a[i][jx[0]], a[i][jx[1]] = a[i][jx[1]], a[i][jx[0]]
for i in a:
    print(*i)

# Задача 4.5_4
"""
Напишите программу, которая проверяет симметричность квадратной матрицы относительно главной диагонали.
"""
n = int(input())
a = [[int(i) for i in input().split()] for i in range(n)]
i, flag = 0, 'YES'
for i in range(n):
    for j in range(i + 1, n):
        if a[i][j] != a[j][i]:
            flag = 'NO'
            break
    if flag == 'NO':
        break
print(flag)

# Задача 4.5_5
"""
Дана квадратная матрица чисел. Напишите программу, которая меняет местами элементы, стоящие на главной и побочной 
диагонали, при этом каждый элемент должен остаться в том же столбце (то есть в каждом столбце нужно поменять местами 
элемент на главной диагонали и на побочной диагонали).
"""
n = int(input())
a = [[int(i) for i in input().split()] for i in range(n)]
for i in range(n):
    a[i][i], a[n - 1 - i][i] = a[n - 1 - i][i], a[i][i]
for i in a:
    print(*i)

# Задача 4.5_6
"""
Дана квадратная матрица чисел. Напишите программу, которая зеркально отображает её элементы относительно 
горизонтальной оси симметрии.
"""
n = int(input())
a = [[int(i) for i in input().split()] for i in range(n)]
for i in range(n):
    for j in range(n):
        print(a[n - 1 - i][j], end=' ')
    print()

# Задача 4.5_6
"""
Напишите программу, которая поворачивает квадратную матрицу чисел на 90 градусов по часовой стрелке.
"""
n = int(input())
a = [[int(i) for i in input().split()] for i in range(n)]
for i in range(n):
    for j in range(n):
        print(a[n - 1 - j][i], end=' ')
    print()

# Задача 4.5_7
"""
На шахматной доске 8×8 стоит конь. Напишите программу, которая отмечает положение коня на доске и все клетки, 
которые бьет конь. Клетку, где стоит конь, отметьте английской буквой N, клетки, которые бьет конь, отметьте 
символами *, остальные клетки заполните точками.
На вход программе подаются координаты коня на шахматной доске в шахматной нотации (то есть в виде e4, где сначала 
записывается номер столбца (буква от a до h, слева направо), затем номеру строки (цифра от 1 до 8, снизу вверх)).
Программа должна вывести на экран изображение доски, разделяя элементы пробелами.
"""
a = input()
sym = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h']
j_pos = sym.index(a[0])
i_pos = 8 - int(a[1])
desk = [['.'] * 8 for i in range(8)]
desk[i_pos][j_pos] = 'N'
for i in range(8):
    for j in range(8):
        if (j_pos - j) * (i_pos - i) in [-2, 2]:
            desk[i][j] = '*'
for line in desk:
    print(*line)

# Задача 4.5_8
"""
Магическим квадратом порядка nn называется квадратная таблица размера n×n, составленная из всех чисел 1,2,3,...,n^2
так, что суммы по каждому столбцу, каждой строке и каждой из двух диагоналей равны между собой. 
Напишите программу, которая проверяет, является ли заданная квадратная матрица магическим квадратом.
"""
n = int(input())
base = set()
matrix = [[int(_) for _ in input().split()] for i in range(n)]
flag = True
for i in range(n):
    for j in range(n):
        if matrix[i][j] in base:
            flag = False
        else:
            base.add(matrix[i][j])
for i in range(n * n):
    if i + 1 not in base:
        flag = False
if flag:
    magic = [0] * (2 * n + 2)
    for i in range(n):
        magic[i] = sum(matrix[i])
        magic[n + i] = sum(matrix[i][j] for j in range(n))
        magic[-2] += matrix[i][i]
        magic[-1] += matrix[i][n - 1 - i]
    for i in magic:
        if magic[0] != i:
            flag = False
    if flag:
        print('YES')
    else:
        print('NO')
else:
    print('NO')