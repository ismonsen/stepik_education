# Задача 4_2_1
# Дополните приведенный код, используя списочный метод append(), чтобы список list1 имел вид:
# list1 = [10, 20, [300, 400, [5000, 6000, 7000], 500], 30, 40]
list1 = [10, 20, [300, 400, [5000, 6000], 500], 30, 40]
list1[2][2].append(7000)
print(list1)

# Задача 4_2_2
"""
Дополните приведенный код, используя списочный метод extend(), чтобы список list1 имел вид:
list1 = ['a', 'b', ['c', ['d', 'e', ['f', 'g', 'h', 'i', 'j'], 'k'], 'l'], 'm', 'n']
Подсписок для расширения  sub_list = ['h', 'i', 'j'].
"""
list1 = ['a', 'b', ['c', ['d', 'e', ['f', 'g'], 'k'], 'l'], 'm', 'n']
sub_list = ['h', 'i', 'j']
list1[2][1][2].extend(sub_list)
print(list1)

# Задача 4_2_3
"""
Дополните приведенный код, используя цикл for и встроенную функцию max(), 
чтобы он выводил один общий максимальный элемент среди всех элементов вложенных списков list1.
"""
list1 = [[1, 7, 8], [9, 7, 102], [6, 106, 105], [100, 99, 98, 103], [1, 2, 3]]
maximum = -1
for i in list1:
    for j in i:
        if j > maximum:
            maximum = j
print(maximum)

# Задача 4_2_4
"""
Дополните приведенный код так, чтобы список list1 имел вид:
list1 = [[8, 7, 1], [102, 7, 9], [105, 106, 102], [103, 98, 99, 100], [3, 2, 1]]
"""
list1 = [[1, 7, 8], [9, 7, 102], [102, 106, 105], [100, 99, 98, 103], [1, 2, 3]]
for i in list1:
    i.reverse()
print(list1)

# Задача 4_2_5
# Дополните приведенный код так, чтобы он выводил единственное число:
# сумму всех чисел списка list1 разделённую на общее количество всех чисел.
list1 = [[1, 7, 8], [9, 7, 102], [102, 106, 105], [100, 99, 98, 103], [1, 2, 3]]
total = 0
counter = 0
for i in list1:
    for j in i:
        total += j
        counter += 1
print(total / counter)

# Задача 4_3_1
"""
На вход программе подается число nn. Напишите программу, которая создает и выводит построчно вложенный список, 
состоящий из nn списков [[1, 2, ..., n], [1, 2, ..., n], ..., [1, 2, ..., n]].
"""
n = int(input())
for i in range(n):
    print([i + 1 for i in range(n)])

# Задача 4_3_2
"""
На вход программе подается число nn. Напишите программу, которая создает и выводит построчно вложенный список, 
состоящий из nn списков [[1], [1, 2], [1, 2, 3], ..., [1, 2, ..., n]].
"""
n = int(input())
for i in range(1, n + 1):
    print([j for j in range(1, i + 1)])

# Задача 4_3_3
# Треугольник Паскаля 1
"""
Треугольник Паскаля — бесконечная таблица биномиальных коэффициентов, имеющая треугольную форму. 
В этом треугольнике на вершине и по бокам стоят единицы. Каждое число равно сумме двух расположенных над ним чисел.
На вход программе подается число nn. Напишите программу, которая возвращает указанную строку треугольника 
Паскаля в виде списка (нумерация строк начинается с нуля).
"""
n = int(input()) + 1
a = [[1] * (i + 1) for i in range(n)]
for i in range(n):
    for j in range(i):
        if i > 1 and 0 < j < n:
            a[i][j] = a[i - 1][j - 1] + a[i - 1][j]
print(a[n - 1])

# Задача 4_3_4
# На вход программе подается натуральное число nn. Напишите программу, которая выводит первые n
# строк треугольника Паскаля.
n = int(input()) + 1
a = [[1] * (i + 1) for i in range(n)]
for i in range(n):
    for j in range(i):
        if i > 1 and 0 < j < n:
            a[i][j] = a[i - 1][j - 1] + a[i - 1][j]
for _ in range(n - 1):
    print(*a[_])

# Задача 4_3_5
"""
Упаковка дубликатов 🌶️
На вход программе подается строка текста, содержащая символы. Напишите программу, которая упаковывает 
последовательности одинаковых символов заданной строки в подсписки.
"""
line = input().split()
lst = [[line[0]]]
j = 0
for i in range(1, len(line)):
    if line[i] in lst[j]:
        lst[j].append(line[i])
    else:
        lst.append([line[i]])
        j += 1
print(lst)

# Задача 4_3_6
"""
Разбиение на чанки
На вход программе подаются две строки, на одной символы, на другой число nn. Из первой строки формируется список.
Реализуйте функцию chunked(), которая принимает на вход список и число, задающее размер чанка (куска), а возвращает 
список из чанков указанной длины.
"""


def chunked(lst, number):
    res_lst = []
    for i in range(0, len(lst), number):
        res_lst.append(lst[i:i + number])
    return res_lst


print(chunked(input().split(), int(input())))
# Задача 4_3_7
"""
Подсписок — часть другого списка. Подсписок может содержать один элемент, несколько, и даже ни одного. 
Например, [1], [2], [3] и [4] — подсписки списка [1, 2, 3, 4]. Список [2, 3] — подсписок списка [1, 2, 3, 4], 
но список [2, 4] не подсписок списка [1, 2, 3, 4], так как элементы 22 и 44 во втором списке не смежные. 
Пустой список — подсписок любого списка. Сам список — подсписок самого себя, то есть список [1, 2, 3, 4] 
подсписок списка [1, 2, 3, 4].
На вход программе подается строка текста, содержащая символы. Из данной строки формируется список. 
Напишите программу, которая выводит список, содержащий все возможные подсписки списка, включая пустой список.
"""
lst = input().split()
res_lst = [[]]
len_lst = len(lst)
for i in range(1, len_lst+1):
    for j in range(0, len_lst):
        if j + i <= len_lst:
            res_lst.append(lst[j:j + i])
print(res_lst)
